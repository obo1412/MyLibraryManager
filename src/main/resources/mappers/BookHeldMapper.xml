<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="BookHeldMapper">
	<resultMap id="bookHeld" type="com.gaimit.mlm.model.BookHeld">
		<!-- beans클래스에서 상속을 받았더라도, 맵퍼에선 명시해줘야한다. -->
		<result property="idBook" column="id_book"/>
		<result property="titleBook" column="title_book"/>
		<result property="writerBook" column="writer_book"/>
		<result property="categoryBook" column="category_book"/>
		<result property="publisherBook" column="publisher_book"/>
		<result property="pubDateBook" column="pub_date_book"/>
		<result property="priceBook" column="price_book"/>
		<result property="isbn10Book" column="isbn10_book"/>
		<result property="isbn13Book" column="isbn13_book"/>
		<result property="descriptionBook" column="description_book"/>
		<result property="bookOrNot" column="book_or_not"/>
		<result property="page" column="page"/>
		<result property="imageLink" column="image_link"/>
		<result property="classificationCode" column="classification_code"/>
		<result property="authorCode" column="author_code"/>
		<result property="volumeCode" column="volume_code"/>
		
		<!-- 이하 bookHeld 칼럼 -->
		<result property="id" column="id"/>
		<result property="libraryIdLib" column="library_id_lib"/>
		<result property="bookIdBook" column="book_id_book"/>
		<result property="bookShelf" column="book_shelf"/>
		<result property="regDate" column="reg_date"/>
		<result property="editDate" column="edit_date"/>
		<result property="localIdBarcode" column="local_id_barcode"/>
		<result property="sortingIndex" column="sorting_index"/>
		<result property="purchasedOrDonated" column="purchased_or_donated"/>
		<result property="available" column="available"/>
		<result property="additionalCode" column="additional_code"/>
		<result property="copyCode" column="copy_code"/>
		
		<!-- library 테이블 -->
		<result property="nameLib" column="name_lib"/>
		
		<!-- pagination limitStart listCount -->
		
		
	</resultMap>
	
	<!-- 아이디 중복검사를 수행한다 -->
	<!-- <select id="selectUserIdCount" parameterType="com.gaimit.mlm.model.Member" resultType="int">
		SELECT count(id) FROM member WHERE user_id=#{userId}
	</select> -->
	
	<!-- 이메일 중복 검사를 수행한다 -->
	<!-- <select id="selectEmailCount" parameterType="com.gaimit.mlm.model.Member" resultType="int">
		SELECT count(id) FROM member WHERE email=#{email}
	</select> -->


	<!-- 도서 목록 조회 -->
	<!-- serviceImpl에서 getBookHeldList -->
	<select id="selectBookHeldList" parameterType="com.gaimit.mlm.model.BookHeld" resultMap="bookHeld">
		SELECT
			id, title_book, writer_book, publisher_book, pub_date_book,
			isbn13_book, classification_code, author_code, volume_code,
			book_shelf, reg_date, edit_date,
			local_id_barcode, purchased_or_donated, available, additional_code, copy_code,
			library_id_lib
		FROM book_held h
		INNER JOIN book b
		ON h.book_id_book = b.id_book
		WHERE library_id_lib=#{libraryIdLib} AND (available = 0 OR available = 1)
			<if test="(titleBook != null) || (writerBook != null) || (publisherBook != null)">
				AND (
					<if test="titleBook != null">
						title_book LIKE concat('%', #{titleBook}, '%')
					</if>
					<if test="writerBook != null">
						writer_book LIKE concat('%', #{writerBook}, '%')
					</if>
					<if test="publisherBook != null">
						publisher_book LIKE concat('%', #{publisherBook}, '%')
					</if>
				)
			</if>
		ORDER BY id DESC
		LIMIT #{limitStart}, #{listCount}
	</select>
	
	<!-- getBookHelditem
		BookHeldView.java 에서 사용-->
	<select id="selectBookHeld" parameterType="com.gaimit.mlm.model.BookHeld" resultMap="bookHeld">
		SELECT
			id, book_shelf, reg_date, edit_date, local_id_barcode, purchased_or_donated,
			available, additional_code, copy_code,
			title_book, writer_book, category_book, publisher_book,
			pub_date_book, price_book, isbn10_book, isbn13_book, description_book,
			book_or_not, page, image_link, classification_code, author_code, volume_code
		FROM book_held h
		INNER JOIN book b ON h.book_id_book = b.id_book
		WHERE library_id_lib=#{libraryIdLib} AND local_id_barcode=#{localIdBarcode}
		<!-- brwBookOK에서 id 없이 바코드만으로 검색이 필요함. 따라서 아래와 같은 조건분기 추가. -->
		<if test="id != null &amp;&amp; id != 0">
			AND id=#{id}
		</if>
		<!-- WHERE id_lib_book = #{idLibBook} AND id_code_book = #{idCodeBook} -->
	</select>
	
	<!-- <select id="selectBookHeld" parameterType="com.gaimit.mlm.model.BookHeld" resultMap="bookHeld">
		SELECT
			id, book_shelf, reg_date, edit_date, local_id_barcode, purchased_or_donated,
			available, additional_code, copy_code
		FROM book_held
		WHERE library_id_lib=#{libraryIdLib} AND id=#{id}

	</select> 이거 id로 호출할때가 필요할 것 같은데 확인해서 분리하거나 하기.-->
	
	<!-- 책 공통DB에 등록되어 있는지 확인
				이후 제목과 저자 비교할때, 띄어쓰기를 다 제거한걸로 비교로 바꾸자-->
	<select id="selectBookCount" parameterType="com.gaimit.mlm.model.BookHeld" resultType="int">
		SELECT
			count(id_book)
		FROM book
		WHERE isbn13_book = #{isbn13Book}
		OR (title_book = #{titleBook} AND writer_book = #{writerBook})
	</select>
	
	<!-- book 테이블에 등록이후 bookId를 가져오기 위한 쿼리
				이후 제목과 저자 비교할때, 띄어쓰기를 다 제거한걸로 비교로 바꾸자  -->
	<select id="selectBookId" parameterType="com.gaimit.mlm.model.BookHeld" resultMap="bookHeld">
		SELECT
			id_book
		FROM book
		WHERE isbn13_book = #{isbn13Book}
		OR (title_book = #{titleBook} AND writer_book = #{writerBook})
		ORDER BY id_book ASC
		LIMIT 1
	</select>
	
	<insert id="insertBook" parameterType="com.gaimit.mlm.model.BookHeld" useGeneratedKeys="true" keyProperty="id_book">
		INSERT INTO book (
			title_book, writer_book, category_book,
			publisher_book, pub_date_book, price_book, isbn10_book, isbn13_book,
			description_book, book_or_not, page, image_link, classification_code,
			author_code, volume_code
		) VALUES (
			#{titleBook}, #{writerBook}, #{categoryBook},
			#{publisherBook}, #{pubDateBook}, #{priceBook}, #{isbn10Book}, #{isbn13Book},
			#{descriptionBook}, #{bookOrNot}, #{page}, #{imageLink}, #{classificationCode},
			#{authorCode}, #{volumeCode} 
		)
	</insert>
	
	<insert id="insertBookHeld" parameterType="com.gaimit.mlm.model.BookHeld" useGeneratedKeys="true" keyProperty="id">
		INSERT INTO book_held (
			library_id_lib, book_id_book, book_shelf, reg_date, edit_date,
			local_id_barcode, sorting_index,
			purchased_or_donated, available, additional_code, copy_code  
		) VALUES (
			#{libraryIdLib}, #{bookIdBook}, #{bookShelf}, now(), now(),
			#{localIdBarcode}, #{sortingIndex},
			#{purchasedOrDonated}, #{available}, #{additionalCode}, #{copyCode}
		)
	</insert>
	
	<!-- bookHeld 테이블에 중복되는 도서가 있는지 검사 -->
	<select id="selectBookHeldCount" parameterType="com.gaimit.mlm.model.BookHeld" resultType="int">
		SELECT
			count(id)
		FROM book_held
		WHERE book_id_book = #{bookIdBook} AND library_id_lib = #{libraryIdLib}
			AND (available = 0 OR available = 1)
	</select>
	
	<!-- bookHeld 도서 첫등록체크
				현재 사용하는 곳이 없는 듯하니 추후 삭제 예정 -->
	<select id="selectBookHeldFirstCount" parameterType="com.gaimit.mlm.model.BookHeld" resultType="int">
		SELECT
			count(id)
		FROM book_held
		WHERE library_id_lib = #{libraryIdLib}
	</select>
	
	<!-- 중간에 비어있는 복본 검색 1은 없음 2가 최소, 2를 기준으로 비어 있는 숫자를 찾기 때문에,
		2가 없이 연속된 숫자면, 최종번호를 보여줌. 따라서 2가 존재해야함. -->
	<select id="selectLastEmptyCopyCode" parameterType="com.gaimit.mlm.model.BookHeld" resultType="int">
		SELECT
			min(copy_code+1)
		FROM book_held
		WHERE book_id_book=#{bookIdBook} AND library_id_lib = #{libraryIdLib}
			AND (available = 0 OR available = 1) AND (copy_code != 0)
			AND copy_code+1
			NOT IN (SELECT copy_code FROM book_held
								WHERE book_id_book=#{bookIdBook} AND library_id_lib = #{libraryIdLib}
								AND (available = 0 OR available = 1) AND (copy_code != 0))
		LIMIT 1;
	</select>
	
	<!-- 연속된 복본번호 검색을 위해서는 최소값인 2가 존재해야한다. -->
	<select id="selectFirstCopyCode" parameterType="com.gaimit.mlm.model.BookHeld" resultType="int">
		SELECT
			min(copy_code)
		FROM book_held
		WHERE book_id_book=#{bookIdBook} AND library_id_lib = #{libraryIdLib}
			AND (available = 0 OR available = 1) AND (copy_code != 0)
	</select>
	
	<!-- 결과값이 0이면 복본기호는 0이 아니라는 말이고, 결과값이 1이면 0이라는 말 -->
	<select id="selectZeroCopyCodeCount" parameterType="com.gaimit.mlm.model.BookHeld" resultType="int">
		SELECT
			COUNT(copy_code)
		FROM book_held
		WHERE book_id_book=#{bookIdBook} AND library_id_lib = #{libraryIdLib}
			AND (available = 0 OR available = 1) AND (copy_code = 0)
	</select>
	
	<!-- 비어있는 번호를 찾기 위한 쿼리, 중간에 비어있는 값이 없으면 이어진 값에서 최대값+1 나옴 
		#{barcodeInitCount} 이놈은 모델에만 선언한 놈으로, bookHeld에 변수로 넣어서
		바코드 헤드의 길이를 측정하기 위해 사용한다.-->
	<select id="selectEmptyLocalBarcode" parameterType="com.gaimit.mlm.model.BookHeld" resultType="int">
		SELECT
			MIN(sorting_index)+1
		FROM book_held
		WHERE library_id_lib = #{libraryIdLib} AND (available = 0 OR available =1)
		AND ((sorting_index+1)
		NOT IN
			(SELECT sorting_index
				FROM book_held
				WHERE (library_id_lib = #{libraryIdLib} AND (available = 0 OR available =1))))
		<!-- ORDER BY local_id_barcode DESC
		LIMIT 1; -->
	</select>
	
	<!-- 1이 존재한다면, 중간에 비어있는 번호의 최소값을 찾아감.
				1인지 아닌지 비교하기 위한 시작 값-->
	<select id="selectFirstLocalBarcode" parameterType="com.gaimit.mlm.model.BookHeld" resultType="int">
		SELECT
			MIN(sorting_index)
		FROM book_held
		WHERE library_id_lib = #{libraryIdLib} AND (available = 0 OR available =1)
	</select>
	
	<!-- 바코드 최종번호 불러오기 마지막에 사용한 바코드 헤드를 참고하기 위하여. -->
	<select id="selectLastLocalBarcode" parameterType="com.gaimit.mlm.model.BookHeld" resultMap="bookHeld">
		SELECT
			local_id_barcode
		FROM book_held
		WHERE library_id_lib = #{libraryIdLib} AND (available = 0 OR available =1)
		ORDER BY id DESC
		LIMIT 1
	</select>
	
	<!-- 혹시나 모를 바코드 중복체크 -->
	<select id="selectDupCheckLocalBarcode" parameterType="com.gaimit.mlm.model.BookHeld" resultType="int">
		SELECT
			COUNT(id)
		FROM book_held
		WHERE library_id_lib = #{libraryIdLib} AND (available = 0 OR available =1)
		AND (sorting_index = #{newBarcodeForDupCheck})
	</select>
	
	<!-- pagination을 위한 전체 도서수 체크 -->
	<select id="selectBookCountForPage" parameterType="com.gaimit.mlm.model.BookHeld" resultType="int">
		SELECT
			COUNT(id)
		FROM book_held h
		INNER JOIN book b ON h.book_id_book = b.id_book
		<where>
			library_id_lib=#{libraryIdLib} AND (available = 0 OR available = 1)
			<if test="(titleBook != null) || (writerBook != null) || (publisherBook != null)">
				AND (
					<if test="titleBook != null">
						title_book LIKE concat('%', #{titleBook}, '%')
					</if>
					<if test="writerBook != null">
						writer_book LIKE concat('%', #{writerBook}, '%')
					</if>
					<if test="publisherBook != null">
						publisher_book LIKE concat('%', #{publisherBook}, '%')
					</if>
				)
			</if>
		</where>
	</select>
	
	<!-- 도서 삭제 bookHeldDelete.java -->
	<delete id="deleteBookHeldItem" parameterType="com.gaimit.mlm.model.BookHeld">
		DELETE FROM book_held
		WHERE id=#{id} AND library_id_lib=#{libraryIdLib}
	</delete>
	
	<!-- 도서 폐기 -->
	<update id="updateBookHeldDiscard" parameterType="com.gaimit.mlm.model.BookHeld">
		UPDATE book_held SET
			edit_date=now(), local_id_barcode=CONCAT(#{localIdBarcode}, 'x'),
			available = 2
		WHERE library_id_lib=#{libraryIdLib} AND local_id_barcode=#{localIdBarcode}
			AND id=#{id}
	</update>
	
	<!-- 폐기도서 목록 보기 bookHeldDiscardList -->
	<select id="selectBookHeldDiscardList" parameterType="com.gaimit.mlm.model.BookHeld" resultMap="bookHeld">
		SELECT
			id, title_book, writer_book, publisher_book, pub_date_book,
			isbn13_book, classification_code, author_code, volume_code,
			book_shelf, reg_date, edit_date,
			local_id_barcode, purchased_or_donated, available, additional_code, copy_code,
			library_id_lib
		FROM book_held h
		INNER JOIN book b ON h.book_id_book = b.id_book
		WHERE library_id_lib=#{libraryIdLib} AND available = 2
		<if test="(titleBook != null) || (writerBook != null) || (publisherBook != null)">
				AND (
					<if test="titleBook != null">
						title_book LIKE concat('%', #{titleBook}, '%')
					</if>
					<if test="writerBook != null">
						writer_book LIKE concat('%', #{writerBook}, '%')
					</if>
					<if test="publisherBook != null">
						publisher_book LIKE concat('%', #{publisherBook}, '%')
					</if>
				)
			</if>
		ORDER BY edit_date DESC
		LIMIT #{limitStart}, #{listCount}
	</select>
	
		<!-- pagination을 위한 폐기도서 전체 도서수 체크 -->
	<select id="selectBookDiscardCountForPage" parameterType="com.gaimit.mlm.model.BookHeld" resultType="int">
		SELECT
			COUNT(id)
		FROM book_held h
		INNER JOIN book b ON h.book_id_book = b.id_book
		<where>
			library_id_lib=#{libraryIdLib} AND available = 2
			<if test="(titleBook != null) || (writerBook != null) || (publisherBook != null)">
				AND (
					<if test="titleBook != null">
						title_book LIKE concat('%', #{titleBook}, '%')
					</if>
					<if test="writerBook != null">
						writer_book LIKE concat('%', #{writerBook}, '%')
					</if>
					<if test="publisherBook != null">
						publisher_book LIKE concat('%', #{publisherBook}, '%')
					</if>
				)
			</if>
		</where>
	</select>
	
	<!-- 도서 정보 수정.java -->
	<update id="updateBookHeldItem" parameterType="com.gaimit.mlm.model.BookHeld">
		UPDATE book_held SET
			edit_date=now(), book_shelf=#{bookShelf}, local_id_barcode=#{localIdBarcode},
			purchased_or_donated=#{purchasedOrDonated},
			additional_code=#{additionalCode}, copy_code=#{copyCode}
		WHERE library_id_lib=#{libraryIdLib} AND id=#{id}
	</update>
	
	<!-- printTag.java -->
	<select id="selectPrintBookHeldList" parameterType="com.gaimit.mlm.model.BookHeld" resultMap="bookHeld">
		SELECT
			id, title_book,  additional_code, copy_code,
			classification_code, author_code, volume_code,
			local_id_barcode, name_lib
		FROM book_held h
		INNER JOIN book b ON h.book_id_book = b.id_book
		INNER JOIN library l ON h.library_id_lib = l.id_lib
		WHERE library_id_lib=#{libraryIdLib} AND (available = 0 OR available = 1)
		<if test="(regDate != null) || (localIdBarcode != null) 
			|| (titleBook != null)">
				AND (
					<if test="regDate != null">
						<!-- 날짜비교할 수 있게 포멧 변경. -->
						date_format(reg_date, '%Y-%m-%d') = #{regDate}
					</if>
					<if test="localIdBarcode != null">
						local_id_barcode = #{localIdBarcode}
					</if>
					<if test="titleBook != null">
						title_book LIKE concat('%', #{titleBook}, '%')
					</if>
				)
			</if>
		ORDER BY sorting_index ASC
		<if test="listCount != 0">
			LIMIT #{limitStart}, #{listCount}
		</if>
	</select>
	
	<!-- 중간에 추가된 sorting_index 컬럼 정리를 위해 한번 사용하려고 만든 쿼리 -->
	<update id="updateSortingIndex" parameterType="com.gaimit.mlm.model.BookHeld">
		UPDATE book_held SET
		 	sorting_index=#{sortingIndex}
		 WHERE library_id_lib=#{libraryIdLib} AND available=1
		 		AND id=#{id}
	</update>

</mapper>